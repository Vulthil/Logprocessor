@typeparam TItem
<div style=@Style>
    @if (Data != null)
    {
        foreach (var item in Data)
        {
            var Text = TextField?.Invoke(item);
            var Value = ValueField?.Invoke(item).ToString();
            <Row>
                <Field ColumnSize="ColumnSize.Is1">
                    <Check Size="Size.Large" TValue="bool" Checked="SelectedValues.Contains(Value)"
                           Disabled="DisabledValues.Contains(Value)"
                           CheckedChanged="eventArgs => { CheckboxClicked(Value, eventArgs); }" />
                    
                </Field>
                <Field ColumnSize="ColumnSize.Is11">
                    <FieldLabel>
                        @Text
                    </FieldLabel>
                </Field>
            </Row>

        }
    }
    @ChildContent
</div>
@code {
    //Data for the Checkbox
    [Parameter] public IEnumerable<TItem> Data { get; set; }
    // The field to be shown adjacent to checkbox
    [Parameter] public Func<TItem, string> TextField { get; set; }
    // The Value which checkbox will return when checked
    [Parameter] public Func<TItem, object> ValueField { get; set; }
    // CSS Style for the Checkbox container
    [Parameter] public string Style { get; set; }
    // Any child content for the control (if needed)
    [Parameter] public RenderFragment ChildContent { get; set; }
    // The array which contains the list of selected checkboxs
    [Parameter] public List<string> SelectedValues { get; set; }
    [Parameter] public IEnumerable<string> DisabledValues { get; set; }

    //Method to update the selected value on click on checkbox
    public void CheckboxClicked(string aSelectedId, bool aChecked)
    {
        if (aChecked)
        {
            if (!SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Add(aSelectedId);
            }
        }
        else
        {
            if (SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Remove(aSelectedId);
            }
        }
        StateHasChanged();
    }
}  